version: '3'
services:
  proxy:
    image: jwilder/nginx-proxy:${ENV_TAG_PROXY}
    environment:
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/ssl/certs:/etc/nginx/certs/
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - ./proxy/datahub_custom.conf:/etc/nginx/conf.d/datahub_custom.conf:ro
      - ./proxy/network_internal.conf:/etc/nginx/network_internal.conf:ro
      - ./proxy/network_external.conf:/etc/nginx/network_external.conf:ro
      - ./proxy/403.html:/usr/share/nginx/html/403.html
      - ./proxy/502.html:/usr/share/nginx/html/502.html
      - ./proxy/503.html:/usr/share/nginx/html/503.html
      - ./proxy/nginx.tmpl:/app/nginx.tmpl
      - ./proxy/pacman.conf:/etc/nginx/vhost.d/pacman.${RIT_ENV}.rit.unimaas.nl
      - ./proxy/davrods.conf:/etc/nginx/vhost.d/webdav.${RIT_ENV}.rit.unimaas.nl
      - ./proxy/davrods_upload.conf:/etc/nginx/vhost.d/upload.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/metalnx.conf:/etc/nginx/vhost.d/metalnx.${RIT_ENV}.rit.unimaas.nl
      - ./proxy/default.conf:/etc/nginx/vhost.d/default
      - ./proxy/mdr_location.conf:/etc/nginx/vhost.d/mdr.${RIT_ENV}.dh.unimaas.nl_location
      - ./proxy/mdr_zones.conf:/etc/nginx/conf.d/mdr_zones.conf
      - ./proxy/mdr.conf:/etc/nginx/vhost.d/mdr.${RIT_ENV}.dh.unimaas.nl
      # To mock MDR production environment, follow these steps:
      # 1. Change './proxy/mdr.conf' to './proxy/mdr_prd.conf' in the volume bind above
      # 2. Uncomment the dev_static_content volume bind below
      # 3. Set 'DJANGO_ENABLE_DEBUG=False' in docker-dev's docker-compose
      # ! Beware that the static file auto-reload won't work anymore as they are then served by the proxy!
#      - dev_static_content:/static
    networks:
      default:
        aliases:
          - proxy.dh.local
      dev_default:
        aliases:
          - proxy.dh.local
  elk:
    build: elk/
    image: ${ENV_REGISTRY_HOST}/docker-common/${ENV_BRANCH}/elk:${ENV_TAG}
    hostname: elk
    environment:
      NODE_OPTIONS: "--max-old-space-size=3072"
      ES_JAVA_OPTS: "-Dls.cgroup.cpuacct.path.override=/ -Dls.cgroup.cpu.path.override=/ -Xms1g -Xmx1g"
      ELASTIC_PASSWORD : foobar
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
      VIRTUAL_HOST: elk.${RIT_ENV}.dh.unimaas.nl
    ports:
#      - "80:80"
      - "5601:5601"
      # Expose Filebeat-ELK-port that accepts logs from non-Docker services
      - "5044:5044"
      # Expose Logstash-HTTP-port that accepts logs from non-Docker services
#      - "5001:5001"
      # expose port for elasticsearch api's
      - "9200:9200"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./elk/elasticsearch.node1.yml:/etc/elasticsearch/elasticsearch.yml
      - ./elk/logstash-config:/etc/logstash/conf.d
      - elastic7data:/var/lib/elasticsearch
    profiles: ["full"]
    networks:
      default:
        aliases:
          - elk.dh.local
      dev_default:
        aliases:
          - elk.dh.local
  elastalert:
    build: externals/elastalert-docker/
    image: ${ENV_REGISTRY_HOST}/docker-common/${ENV_BRANCH}/elastalert:${ENV_TAG}
    hostname: elastalert
    environment:
      SET_CONTAINER_TIMEZONE: "True" #Set to "True" (without quotes) to set the timezone when starting a container. Default is False
      CONTAINER_TIMEZONE: Europe/Amsterdam
      ELASTICSEARCH_HOST: elk.dh.local
      ELASTICSEARCH_PORT: 9200 #Defaults to 9200.
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PASSWORD: foobar
      LOGSPOUT: ignore
#      ELASTICSEARCH_TLS - Use HTTPS when connecting to Elasticsearch (True/False). Default is False.
#      ELASTICSEARCH_TLS_VERIFY - Verify server (Elasticsearch) certificate (True/False). Default is False.
#      ELASTALERT_INDEX - Name of Elastalert writeback index in Elasticseach. Defaults to elastalert_status.
    volumes:
      - elastalertdata:/opt/logs
      - ./externals/elastalert-docker/config:/opt/config
      - ./externals/elastalert-docker/rules:/opt/rules
      - ./externals/elastalert-docker/custom_alerts.py:/opt/elastalert/custom_alerts.py
    profiles: ["full"]
    networks:
      default:
        aliases:
          - elastalert.dh.local
      dev_default:
        aliases:
          - elastalert.dh.local
  logspout:
    build: logspout/
    image: ${ENV_REGISTRY_HOST}/docker-common/${ENV_BRANCH}/logspout:${ENV_TAG}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /etc/localtime:/etc/localtime:ro
#    depends_on:
#      - "elk"
    environment:
      DEBUG: "true"
      LOGSPOUT: ignore
      MULTILINE_ENABLE_DEFAULT: "true"
      MULTILINE_MATCH: "nonfirst"
      MULTILINE_PATTERN: '^(\s|{>)'
      MULTILINE_FLUSH_AFTER: 1000
      LOGSTASH_FIELDS: "inputsource=logspout"
    command:
      - "multiline+logstash://elk.dh.local:5000"
      - "elk.dh.local"
    profiles: ["full"]
    networks:
      default:
        aliases:
          - logspout.dh.local
      dev_default:
        aliases:
          - logspout.dh.local
  rabbitmq:
    build: rabbitmq/
    image: ${ENV_REGISTRY_HOST}/docker-common/${ENV_BRANCH}/rabbitmq:${ENV_TAG}
    hostname: rabbitmq
    environment:
      # Note that changing the default username and password through these ENV vars does not work when the named volume 'rabbitmq' already exists.
      # Username and password are stored in a credentials file somewhere inside the /var/lib/rabbitmq folder (thus within the named volume)
      # In such cases, changing the username and password can only be achieved by 1) doing it through the rabbitmq management web interface
      # or 2) by deleting the named volume, updating the ENV vars and recreating the Docker container.
      LOGSTASH_TAGS: RABBITMQ
      VIRTUAL_HOST: rabbitmq.${RIT_ENV}.rit.unimaas.nl
      VIRTUAL_PORT: 15672
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    profiles: ["minimal","full"]
    networks:
      default:
        aliases:
          - rabbitmq.dh.local
      dev_default:
        aliases:
          - rabbitmq.dh.local
  mailer:
    build: externals/dh-mailer
    image: ${ENV_REGISTRY_HOST}/docker-common/${ENV_BRANCH}/mailer:${ENV_TAG}
    hostname: mailer
    environment:
      HTTP_AUTH_USERNAME : user
      HTTP_AUTH_PASSWORD : password
      RABBITMQ_HOST : rabbitmq.dh.local
      RABBITMQ_USER : user
      RABBITMQ_PASS : password
      TRANSPORT : "stub"
      BCC : "false"
      MICROSERVICE_PORT : 80
      DEFAULT_FROM : "DataHub [mailer] <datahub@maastrichtuniversity.nl>"
      SMTP_HOST : "smtp.maastrichtuniversity.nl"
      SMTP_PORT : 25
      TEMPLATES_DIR : "/usr/src/app/templates"
      # Send 1 message every 1000 milliseconds
      CHANNEL_PREFETCH : 1
      MS_BETWEEN_PULLS : 1000
      LOG_LEVEL_CONSOLE : 'info'
      LOG_LEVEL_FILE : 'debug'
      LOGSTASH_TAGS: MAILER
      VIRTUAL_HOST: mailer.${RIT_ENV}.dh.unimaas.nl
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./externals/dh-mailer/app:/usr/src/app/
    profiles: ["minimal","full"]
    networks:
      default:
        aliases:
          - mailer.dh.local
      dev_default:
        aliases:
          - mailer.dh.local
  fail2ban:  
    image: crazymax/fail2ban:${ENV_FAIL2BAN_VERSION}
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW 
    profiles: ["full"]
    volumes:
      - dev_webdav_logs:/var/log/webdav:ro
      - dev_upload_logs:/var/log/upload:ro
      - "./externals/dh-fail2ban/data:/data"
    env_file:
      - "./externals/dh-fail2ban/fail2ban.env"
networks:
  dev_default:
    external: true
volumes:
  elastalertdata:
  rabbitmq:
  elastic7data:
  dev_static_content:
    external: true
  dev_webdav_logs:
    external: true
  dev_upload_logs:
    external: true
