services:
  proxy:
    image: jwilder/nginx-proxy:${ENV_TAG_PROXY}
    environment:
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/ssl/certs:/etc/nginx/certs/
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - ./proxy/datahub_custom.conf:/etc/nginx/conf.d/datahub_custom.conf:ro
      - ./proxy/network_internal.conf:/etc/nginx/network_internal.conf:ro
      - ./proxy/network_external.conf:/etc/nginx/network_external.conf:ro
      - ./proxy/403.html:/usr/share/nginx/html/403.html
      - ./proxy/502.html:/usr/share/nginx/html/502.html
      - ./proxy/503.html:/usr/share/nginx/html/503.html
     # Comment this line out when we enter maintenance to show the maintenance page
     # Then recreate the nginx proxy container 
     # - ./proxy/maintenance/503.html:/usr/share/nginx/html/503.html
     # The lines below will require a MDR SSL certificate to be symlinked to /etc/ssl/certs/default.crt and /etc/ssl/certs/default.key
     # $ ln -s mdr.${RIT_ENV}.dh.unimaas.nl.crt default.crt
     # - ./proxy/nginx.tmpl:/app/nginx.tmpl
      - ./proxy/pacman.conf:/etc/nginx/vhost.d/pacman.${RIT_ENV}.rit.unimaas.nl
      - ./proxy/davrods.conf:/etc/nginx/vhost.d/download.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/davrods_upload.conf:/etc/nginx/vhost.d/upload.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/metalnx.conf:/etc/nginx/vhost.d/metalnx.${RIT_ENV}.rit.unimaas.nl
      - ./proxy/default.conf:/etc/nginx/vhost.d/default
      - ./proxy/app_mdr_location.conf:/etc/nginx/vhost.d/app.mdr.${RIT_ENV}.dh.unimaas.nl_location
      - ./proxy/app_mdr_zones.conf:/etc/nginx/conf.d/app_mdr_zones.conf
      - ./proxy/app_mdr.conf:/etc/nginx/vhost.d/app.mdr.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/helpcenter.conf:/etc/nginx/vhost.d/help.mdr.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/public_zones.conf/:/etc/nginx/conf.d/public_zones.conf
      - ./proxy/helpcenter_location.conf:/etc/nginx/vhost.d/help.mdr.${RIT_ENV}.dh.unimaas.nl_location
      - ./proxy/mdr.conf:/etc/nginx/vhost.d/mdr.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/admintools.conf:/etc/nginx/vhost.d/admin.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/admin_htpasswd:/etc/nginx/htpasswd/admin.${RIT_ENV}.dh.unimaas.nl
      - ./proxy/admin_htpasswd:/etc/nginx/htpasswd/admin-tools-backend.dh.local
      - ./proxy/mdr_location.conf:/etc/nginx/vhost.d/mdr.${RIT_ENV}.dh.unimaas.nl_location
      - ./proxy/dhhome.conf:/etc/nginx/vhost.d/${RIT_ENV}.dh.unimaas.nl
      - ./proxy/dhhome_location.conf:/etc/nginx/vhost.d/${RIT_ENV}.dh.unimaas.nl_location
      # To mock MDR production environment, follow these steps:
      # 1. Change './proxy/app_mdr.conf' to './proxy/app_mdr_prd.conf' in the volume bind above
      # 2. Uncomment the dev_static_content volume bind below
      # 3. Set 'DJANGO_ENABLE_DEBUG=False' in docker-dev's docker-compose
      # ! Beware that the static file auto-reload won't work anymore as they are then served by the proxy!
#      - dev_static_content:/static
    networks:
      dh_default:
        ipv4_address: 172.21.1.100
        aliases:
          - proxy.dh.local
      dh_public:

  elk:
    build: elk/
    image: ${ENV_REGISTRY_HOST}/docker-common/elk:${ENV_TAG}
    hostname: elk
    environment:
      NODE_OPTIONS: "--max-old-space-size=3072"
      ES_JAVA_OPTS: "-Dls.cgroup.cpuacct.path.override=/ -Dls.cgroup.cpu.path.override=/ -Xms1g -Xmx1g"
      ELASTIC_PASSWORD : foobar
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
      VIRTUAL_HOST: elk.${RIT_ENV}.dh.unimaas.nl
    ports:
#      - "80:80"
      - "5601:5601"
      # Expose Filebeat-ELK-port that accepts logs from non-Docker services
      - "5044:5044"
      # Expose Logstash-HTTP-port that accepts logs from non-Docker services
#      - "5001:5001"
      # expose port for elasticsearch api's
      - "9200:9200"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./elk/elasticsearch.node1.yml:/etc/elasticsearch/elasticsearch.yml
      - ./elk/logstash-config:/etc/logstash/conf.d
      - elastic7data:/var/lib/elasticsearch
    profiles: ["full"]
    networks:
      default:
        aliases:
          - elk.dh.local
      dh_default:
        aliases:
          - elk.dh.local
      dev-hdp_hdp-dh-mumc-net:
        aliases:
          - elk.dh.local
      dev-hdp_hdp-dh-zio-net:
        aliases:
          - elk.dh.local
      dev-hdp_hdp-dh-envida-net:
        aliases:
          - elk.dh.local
  elastalert:
    build: externals/elastalert-docker/
    image: ${ENV_REGISTRY_HOST}/docker-common/elastalert:${ENV_TAG}
    hostname: elastalert
    environment:
      SET_CONTAINER_TIMEZONE: "True" #Set to "True" (without quotes) to set the timezone when starting a container. Default is False
      CONTAINER_TIMEZONE: Europe/Amsterdam
      ELASTICSEARCH_HOST: elk.dh.local
      ELASTICSEARCH_PORT: 9200 #Defaults to 9200.
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PASSWORD: foobar
      LOGSPOUT: ignore
#      ELASTICSEARCH_TLS - Use HTTPS when connecting to Elasticsearch (True/False). Default is False.
#      ELASTICSEARCH_TLS_VERIFY - Verify server (Elasticsearch) certificate (True/False). Default is False.
#      ELASTALERT_INDEX - Name of Elastalert writeback index in Elasticseach. Defaults to elastalert_status.
    volumes:
      - elastalertdata:/opt/logs
      - ./externals/elastalert-docker/config:/opt/config
      - ./externals/elastalert-docker/rules:/opt/rules
      - ./externals/elastalert-docker/custom_alerts.py:/opt/elastalert/custom_alerts.py
    profiles: ["full"]
    networks:
      default:
        aliases:
          - elastalert.dh.local
      dh_default:
        aliases:
          - elastalert.dh.local
  logspout:
    build: logspout/
    image: ${ENV_REGISTRY_HOST}/docker-common/logspout:${ENV_TAG}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /etc/localtime:/etc/localtime:ro
#    depends_on:
#      - "elk"
    environment:
      DEBUG: "true"
      LOGSPOUT: ignore
      MULTILINE_ENABLE_DEFAULT: "true"
      MULTILINE_MATCH: "nonfirst"
      MULTILINE_PATTERN: '^(\s|{>)'
      MULTILINE_FLUSH_AFTER: 1000
      LOGSTASH_FIELDS: "inputsource=logspout"
    command:
      - "multiline+logstash://elk.dh.local:5000"
      - "elk.dh.local"
    profiles: ["full"]
    networks:
      default:
        aliases:
          - logspout.dh.local
      dh_default:
        aliases:
          - logspout.dh.local
      dev-hdp_hdp-dh-mumc-net:
        aliases:
          - logspout.dh.local
      dev-hdp_hdp-dh-zio-net:
        aliases:
          - logspout.dh.local
      dev-hdp_hdp-dh-envida-net:
        aliases:
          - logspout.dh.local
  fail2ban:
    image: crazymax/fail2ban:${ENV_FAIL2BAN_VERSION}
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    profiles: ["full"]
    volumes:
      - dev_webdav_logs:/var/log/webdav:ro
      - dev_upload_logs:/var/log/upload:ro
      - "./externals/dh-fail2ban/data:/data"
    env_file:
      - "./externals/dh-fail2ban/fail2ban.env"
  filebeat-public-logs:
    build:
      context: public-logs/Docker/
      dockerfile: Dockerfile
    image: ${ENV_REGISTRY_HOST}/docker-dev/filebeat-public-logs:${ENV_TAG}
    volumes:
          - ./public-logs/:/var/logs/public-containers/ #acc/prd
    profiles: ["full"]
    networks:
      default:
        aliases:
          - filebeat-public-logs.dh.local
      dh_default:
        aliases:
          - filebeat-public-logs.dh.local

networks:
  dh_default:
    ipam:
      driver: default
      config:
        - subnet: "172.20.1.0/24"
    external: true
  dh_public:
    external: true
  dev-hdp_hdp-dh-mumc-net:
    external: true
  dev-hdp_hdp-dh-zio-net:
    external: true
  dev-hdp_hdp-dh-envida-net:
    external: true
volumes:
  elastalertdata:
  elastic7data:
  dev_static_content:
    external: true
  dev_webdav_logs:
    external: true
  dev_upload_logs:
    external: true
