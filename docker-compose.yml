version: '2'
services:
  proxy:
    image: jwilder/nginx-proxy
    environment:
      DEFAULT_HOST: pacman.${RIT_ENV}.rit.unimaas.nl
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/ssl/certs:/etc/nginx/certs/
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - ./proxy/client_max_body_size.conf:/etc/nginx/conf.d/client_max_body_size.conf:ro
    networks:
      default:
        aliases:
          - proxy.dh.local
      corpus_default:
        aliases:
          - proxy.dh.local
  elk:
    build: elk/
    hostname: elk
    environment:
      NODE_OPTIONS: "--max-old-space-size=3072"
      ES_JAVA_OPTS: "-Dls.cgroup.cpuacct.path.override=/ -Dls.cgroup.cpu.path.override=/"
      ELASTIC_PASSWORD : foobar
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
      VIRTUAL_HOST: elk.${RIT_ENV}.rit.unimaas.nl
    ports:
#      - "80:80"
      - "5601:5601"
      # Expose Filebeat-ELK-port that accepts logs from non-Docker services
      - "5044:5044"
      # Expose Logstash-HTTP-port that accepts logs from non-Docker services
#      - "5001:5001"
      # expose port for elasticsearch api's
      - "9200:9200"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./elk/elasticsearch.node1.yml:/etc/elasticsearch/elasticsearch.yml
      - ./elk/logstash-config:/etc/logstash/conf.d
      - elastic7data:/var/lib/elasticsearch
    networks:
      default:
        aliases:
          - elk.dh.local
      corpus_default:
        aliases:
          - elk.dh.local
  elk5:
    build: elk5/
#    image: sebp/elk:740
    hostname: elk5
    environment:
      ELASTIC_PASSWORD : foobar
      # otherwise logstash will keep sending its own logs to itself over and over
      LOGSPOUT: ignore
      VIRTUAL_HOST: elk5.${RIT_ENV}.rit.unimaas.nl
    ports:
#      - "85:80"
      - "5605:5601"
      # Expose Filebeat-ELK-port that accepts logs from non-Docker services
#      - "5044:5044"
      # Expose Logstash-HTTP-port that accepts logs from non-Docker services
      - "5001:5001"
      # expose port for elasticsearch api's
      - "9205:9200"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./elk5/logstash-config:/etc/logstash/conf.d
      - elasticdata:/var/lib/elasticsearch
    networks:
      default:
        aliases:
          - elk5.dh.local
      corpus_default:
        aliases:
          - elk5.dh.local
  elastalert:
    build: externals/elastalert-docker/
    hostname: elastalert
    environment:
      SET_CONTAINER_TIMEZONE: "True" #Set to "True" (without quotes) to set the timezone when starting a container. Default is False
      CONTAINER_TIMEZONE: Europe/Amsterdam
      ELASTICSEARCH_HOST: elk.dh.local
      ELASTICSEARCH_PORT: 9200 #Defaults to 9200.
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PASSWORD: foobar
      LOGSPOUT: ignore
#      ELASTICSEARCH_TLS - Use HTTPS when connecting to Elasticsearch (True/False). Default is False.
#      ELASTICSEARCH_TLS_VERIFY - Verify server (Elasticsearch) certificate (True/False). Default is False.
#      ELASTALERT_INDEX - Name of Elastalert writeback index in Elasticseach. Defaults to elastalert_status.
    volumes:
      - elastalertdata:/opt/logs
      - ./externals/elastalert-docker/config:/opt/config
      - ./externals/elastalert-docker/rules:/opt/rules
      - ./externals/elastalert-docker/custom_alerts.py:/opt/elastalert/custom_alerts.py
    networks:
      default:
        aliases:
          - elastalert.dh.local
      corpus_default:
        aliases:
          - elastalert.dh.local
  logspout:
    build: logspout/
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
      - /etc/localtime:/etc/localtime:ro
#    depends_on:
#      - "elk"
    environment:
      DEBUG: "true"
      LOGSPOUT: ignore
      MULTILINE_ENABLE_DEFAULT: "true"
      MULTILINE_MATCH: "nonfirst"
      MULTILINE_PATTERN: '^(\s|{>)'
      MULTILINE_FLUSH_AFTER: 1000
    command: "multiline+logstash://elk.dh.local:5000"
    networks:
      default:
        aliases:
          - logspout.dh.local
      corpus_default:
        aliases:
          - logspout.dh.local
  nagios:
    build: externals/nagios-docker/
    hostname: nagios
    environment:
      NAGIOS_FQDN: nagios.${RIT_ENV}.rit.unimaas.nl
      MAILER_MICROSERVICE_HOST: mailer.${RIT_ENV}.rit.unimaas.nl
      MAILER_MICROSERVICE_USER: user
      MAILER_MICROSERVICE_PASS: password
      LOGSTASH_TAGS: NAGIOS, AUX
      VIRTUAL_HOST: nagios.${RIT_ENV}.rit.unimaas.nl
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./externals/nagios-docker/cust-plugins:/opt/Custom-Nagios-Plugins:ro
      - ./externals/nagios-docker/etc:/opt/nagios/etc:ro
      - ./externals/nagios-docker/etc/htpasswd.users:/opt/nagios/etc/htpasswd.users
      - nagiosdata:/opt/nagios/var
      - ./.pgpass:/opt/nagios/.pgpass:ro
    networks:
      default:
        aliases:
          - nagios.dh.local
      corpus_default:
        aliases:
          - nagios.dh.local
  rabbitmq:
    build: rabbitmq/
    hostname: rabbitmq
    environment:
      # Note that changing the default username and password through these ENV vars does not work when the named volume 'rabbitmq' already exists.
      # Username and password are stored in a credentials file somewhere inside the /var/lib/rabbitmq folder (thus within the named volume)
      # In such cases, changing the username and password can only be achieved by 1) doing it through the rabbitmq management web interface
      # or 2) by deleting the named volume, updating the ENV vars and recreating the Docker container.
      LOGSTASH_TAGS: RABBITMQ
      VIRTUAL_HOST: rabbitmq.${RIT_ENV}.rit.unimaas.nl
      VIRTUAL_PORT: 15672
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      default:
        aliases:
          - rabbitmq.dh.local
      corpus_default:
        aliases:
          - rabbitmq.dh.local
  mailer:
    build: externals/dh-mailer
    hostname: mailer
    environment:
      HTTP_AUTH_USERNAME : user
      HTTP_AUTH_PASSWORD : password
      RABBITMQ_HOST : rabbitmq.dh.local
      RABBITMQ_USER : user
      RABBITMQ_PASS : password
      TRANSPORT : "stub"
      BCC : "false"
      MICROSERVICE_PORT : 80
      DEFAULT_FROM : "DataHub [mailer] <datahub@maastrichtuniversity.nl>"
      SMTP_HOST : "smtp.maastrichtuniversity.nl"
      SMTP_PORT : 25
      TEMPLATES_DIR : "/usr/src/app/templates"
      # Send 1 message every 1000 milliseconds
      CHANNEL_PREFETCH : 1
      MS_BETWEEN_PULLS : 1000
      LOG_LEVEL_CONSOLE : 'info'
      LOG_LEVEL_FILE : 'debug'
      LOGSTASH_TAGS: MAILER
      VIRTUAL_HOST: mailer.${RIT_ENV}.rit.unimaas.nl
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./externals/dh-mailer/app:/usr/src/app/
    networks:
      default:
        aliases:
          - mailer.dh.local
      corpus_default:
        aliases:
          - mailer.dh.local
networks:
  corpus_default:
    external: true
volumes:
  elastalertdata:
  nagiosdata:
  rabbitmq:
  elasticdata:
  elastic7data:

