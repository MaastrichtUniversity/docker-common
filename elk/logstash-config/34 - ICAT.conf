filter {
    if "ICAT" in [tags] {
        if [log][original] =~ /environment variable set/ {drop { }}
        if [log][original] =~ /Authenticated/ {drop { }}

        mutate {
            add_field => { "logtrail" => "icat" }
            add_tag => [ "CP34_MUT01" ]
        }

        grok {
            break_on_match => true
            # msiWriteRodsLog message
            match => { "[log][original]" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\sNOTICE:\smsiWriteRodsLog message:\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:[log][message]}" }
            match => { "[log][original]" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:[log][message]}" }
            match => { "[log][original]" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\s%{DATA:level}:\s+%{GREEDYDATA:[log][message]}" }
            match => { "[log][original]" => "^remote addresses: %{IP:serverip} %{LOGLEVEL:level}: %{DATA:[log][message]}\nremote addresses: %{IP} %{LOGLEVEL}: Rule exec for \[(\n)?%{SPACE}%{JAVALOGMESSAGE:irods-rule}(\n)?%{SPACE}\] failed. status = \[%{NUMBER:errornr}\]" }
            match => { "[log][original]" => "^remote addresses: %{IP:serverip} %{LOGLEVEL:level}: %{DATA:[log][message]} %{WORD:errorcode}\nremote addresses: %{IP} %{LOGLEVEL}: connect error" }
            match => { "[log][original]" => "^remote addresses: %{IP:serverip} %{LOGLEVEL:level}: %{DATA:[log][message]}" }
            match => { "[log][original]" => "\*\*\* %{NOTSPACE:class} %{DATA:[log][message]} \*\*\*\n%{GREEDYDATA:stacktrace}" }
            match => { "[log][original]" => "^%{LOGLEVEL:level}: %{GREEDYDATA:[log][message]}" }
            add_tag => [ "CP34_GRO01" ]
        }


        # Get client IPs
        if [log][message] =~ /started/ {
            grok {
                match => { "[log][message]" => "Agent\sprocess\s%{POSINT:pid}\sstarted\sfor\spuser=%{HTTPDUSER:puser}\sand\scuser=%{HTTPDUSER:cuser}\sfrom\s%{IPV4:clientip}" }
                add_tag => [ "CP34_MUT02" ]
            }
        }

        # Year is not present in the log date format, getting it from the filename
        grok {
            match => { "[log][file][path]" => "%{YEAR:log_year}" }
            add_tag => [ "CP34_MUT03" ]
        }

        if [timestamp] {
            mutate {
                replace => [ "timestamp", "%{timestamp} %{log_year}" ]
                remove_field => "log_year"
                add_tag => [ "CP34_MUT04" ]
            }
            date {
                timezone => "Europe/Amsterdam"
                match => [ "timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
                remove_field => [ "timestamp" ]       # cleanup, data is available in @timestamp
                add_tag => [ "CP34_DAT01" ]
            }
        }
    }
}
