filter {
    if "IRES" in [tags] {
        if [message] =~ /environment variable set/ {drop { }}
        if [message] =~ /Authenticated/ {drop { }}

        ## First let's do the service specific parts
        if "IRES_UM01" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um01" }
                add_tag => [ "CP35_MUT01" ]
            }
        }
        if "IRES_UM02" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um02" }
                add_tag => [ "CP35_MUT02" ]
            }
        }
        if "IRES_UM03" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um03" }
                add_tag => [ "CP35_MUT03" ]
            }
        }
        if "IRES_UM04" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um04" }
                add_tag => [ "CP35_MUT04" ]
            }
        }
        if "IRES_AZM" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_azm" }
                add_tag => [ "CP35_MUT05" ]
            }
        }
        if "IRES_SURFSARA" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_surfsara" }
                add_tag => [ "CP35_MUT06" ]
            }
        }


        ## Now do the general parsing which is equal for all resource servers

        grok {
            break_on_match => true
            # msiWriteRodsLog message
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\sNOTICE:\smsiWriteRodsLog message:\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:log_message}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:log_message}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\s%{DATA:level}:\s+%{GREEDYDATA:log_message}" }
            match => { "message" => "%{GREEDYDATA:log_message}" }
            add_tag => [ "CP35_GRO01" ]
        }

        # Get client IPs
        if [log_message] =~ /started/ {
            grok {
                match => { "log_message" => "Agent\sprocess\s%{POSINT:pid}\sstarted\sfor\spuser=%{HTTPDUSER:puser}\sand\scuser=%{HTTPDUSER:cuser}\sfrom\s%{IPV4:clientip}" }
                add_tag => [ "CP35_GRO02" ]
          }
        }

        if [log_message] =~/msiWriteRodsLog message:/ {
            # strip prefix from log_message
            mutate {
                gsub => [
                    "log_message", "msiWriteRodsLog message: ", ""
                ]
                add_tag => [ "CP35_MUT07" ]
            }
        }

        if [timestamp] {
            # Year is not present in the log date format, getting it from the filename
            grok {
                match => { "[log][file][path]" => "%{YEAR:log_year}" }
                add_tag => [ "CP35_GRO03" ]
            }

            mutate {
                replace => [ "timestamp", "%{timestamp} %{log_year}" ]
                remove_field => "log_year"
                add_tag => [ "CP35_MUT08" ]
            }

            date {
                timezone => "Europe/Amsterdam"
                match => [ "timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
                remove_field => [ "timestamp" ] #cleanup, data is available in @timestamp
                add_tag => [ "CP35_DAT01" ]
            }
        }
    }
}
