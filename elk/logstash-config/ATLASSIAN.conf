filter {

    if "JIRA" in [tags] {

        # Following Jira logs are not (yet) parsed or processed, so not available in ElasticSearch / Kibana:
        # opt:
        # - localhost.*.log                     empty files
        # - manager.*.log                       empty files
        # - host-manager.*.log                  empty files
        # var:
        # - atlassian-jira-incoming-mail.log*   included in atlassian.out
        # - atlassian-jira.log*                 included in atlassian.out
        # - atlassian-servicedesk.log           module not used anymore

        if [source] =~ /access.log/ {
            grok {
                match => { "message" => "^%{IP:clientip}(,%{IP:proxyip})? %{NOTSPACE:requestid} %{HTTPDUSER:user} \[%{HTTPDATE:log_timestamp}\] \"%{GREEDYDATA:action}\" (%{INT:response}|-) (%{INT:bytes_read}|-) (%{INT:bytes_written}|-) (%{QS:ref_url}|-) \"?%{QS:agent}\"? (%{QS:sessionid}|-)" }
            }
        }

        if [source] =~ /atlassian-jira-security.log/ {
            grok {
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{NOTSPACE:thread} %{HTTPDUSER:user}? %{HTTPDUSER:requestid}? %{NOTSPACE:sessionid}? (%{IPORHOST:clientip}(,%{IPORHOST:proxyip})?(,%{IPORHOST:server})?)? (%{RIT_SERVICE:request_url})? %{JAVALOGMESSAGE:log_message}" }
            }
        }

        if [source] =~ /atlassian-jira-slow-queries.log/ {
            grok {
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{PROG:thread} %{LOGLEVEL:loglevel} %{USER:user}? %{HTTPDUSER:requestid}? %{NOTSPACE:sessionid}? (%{RIT_SERVICE:request_url})? %{SYSLOG5424SD:category} %{JAVALOGMESSAGE:log_message}" }
            }
            grok {
                match => { "log_message" => "^JQL query '%{DATA:slow_query.jql}' produced lucene query '%{DATA:slow_query.lucene}' and took '%{POSINT:slow_query.duration_in_ms}' ms to run." }
            }
        }

        if [source] =~ /catalina.out/ or [source] =~ /catalina(.*).log/ {
            # Following message overflood logging (approx 65% of lines in catalina.out) and are not required
            # (https://jira.atlassian.com/browse/JRASERVER-34570), so exclude them:
            # - datahub@maastrichtuniversity.nl datahub@maastrichtuniversity.nl[10100]: Cannot handle message as the recipient(s) (.....) do not match the catch email datahub@maastrichtuniversity.nl
            # - castor-datahub@mumc.nl castor-datahub@mumc.nl[10100]: Cannot handle message as the recipient(s) (....) do not match the catch email castor-datahub@mumc.nl
            # - Datahub@mumc.nl Datahub@mumc.nl[10100]: Cannot handle message as the recipient(s) (.....) do not match the catch email datahub@mumc.nl
            if [message] =~ /Cannot handle message as the recipient/ {drop { }}

            # Content from following files is included in catalina.out. Therefore these logfiles won't be parsed explicitly:
            # - atlassian-jira.log
            # - atlassian-jira-incoming-mail.log

            # catalina logs and out files contain logs from multiple sources with different formatting, hence the multiple grok patterns
            grok {
                break_on_match => true
                match => { "message" => "^%{TOMCAT8_DATESTAMP:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{JAVACLASS:category} %{JAVALOGMESSAGE:log_message}" }
                # log-pattern of atlassian-jira-incoming-mail.log
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:mailserver} %{RIT_PROG:thread} %{USER:user}? %{HTTPDUSER:requestid}? %{NOTSPACE:sessionid}? (%{IPORHOST:clientip},(%{IPORHOST:proxyip},)?%{IPORHOST:serverip})? (%{RIT_SERVICE:reqeust_url})? %{JAVALOGMESSAGE:log_message}" }
                # log-pattern of atlassian-jira.log
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{RIT_PROG:thread}( ?%{NUMBER:thread_id})? %{LOGLEVEL:loglevel} %{USER:user}? %{HTTPDUSER:requestid}? %{NOTSPACE:sessionid}? (%{IPORHOST:clientip},(%{IPORHOST:proxyip},)?%{IPORHOST:serverip})? (%{RIT_SERVICE:request_url})? %{SYSLOG5424SD:category} %{JAVALOGMESSAGE:log_message}" }
            }
        }

        # set logtrail field for all Jira logfiles
        mutate {
            add_field => { "logtrail" => "Atlassian - Jira" }
        }
    }


    if "CONFLUENCE" in [tags] {

        # Following Confluence logs are not (yet) parsed or processed, so not available in ElasticSearch / Kibana:
        # opt:
        # - catalina.*.log                      included in catalina.out
        # - gc*.log.*                           java garbage collection logs are different (regarding type and format), don't seem to be usefull atm
        # - localhost.*.log                     empty files
        # - manager.*.log                       empty files
        # - host-manager.*.log                  empty files
        # var:
        # - atlassian-synchrony.log*            seems not that important and unclear (yet) how to parse json logfile

        if [source] =~ /atlassian-confluence.log/ {
            grok {
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{SYSLOG5424SD:category} %{NOTSPACE:method} %{JAVALOGMESSAGE:log_message}$" }
            }
        }

        if [source] =~ /atlassian-synchrony-proxy.log/ { # from "opt" location!!
            grok {
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} %{JAVALOGMESSAGE:log_message}$" }
            }
        }

        if [source] =~ /catalina.out/ {
            grok {
                break_on_match => true
                match => { "message" => "^%{BIND9_TIMESTAMP:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{NOTSPACE:category} %{JAVALOGMESSAGE:log_message}" }
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} \[%{JAVACLASS:category}\] %{JAVALOGMESSAGE:log_message}" }
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp}\n%{JAVALOGMESSAGE:log_message}" }
                match => { "message" => "^\[%{PROG:thread}] %{LOGLEVEL:loglevel} %{JAVACLASS:category} - %{GREEDYDATA:log_message}" }
            }
        }

        # set logtrail field
        mutate {
            add_field => { "logtrail" => "Atlassian - Confluence" }
        }

    }


    if "BITBUCKET" in [tags] {

        # Following Bitbucket logs are not (yet) parsed or processed, so not available in ElasticSearch / Kibana:
        # opt:
        # - catalina.*.log                      included in catalina.out
        # - manager.*.log                       empty files
        # - host-manager.*.log                  empty files
        # var:
        # -

        if [source] =~ /catalina.out/ {
            grok {
                match => { "message" => "^%{TOMCAT8_DATESTAMP:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{NOTSPACE:category} %{JAVALOGMESSAGE:log_message}" }
            }
        }

        if [source] =~ /localhost(.*).log/ {
            grok {
                break_on_match => true
                match => { "message" => "%{TOMCAT8_DATESTAMP:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{JAVACLASS:category} %{JAVACLASS:category_2} %{LOGLEVEL:loglevel2}: %{JAVALOGMESSAGE:log_message}" }
                match => { "message" => "%{TOMCAT8_DATESTAMP:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{NOTSPACE:category} %{JAVALOGMESSAGE:log_message}" }
                match => { "message" => "^%{TOMCAT8_DATESTAMP:log_timestamp} %{LOGLEVEL:loglevel} %{SYSLOG5424SD:thread} %{JAVALOGMESSAGE:log_message}" }
            }
            # TODO: Needs probably some further processing to consolidate category 1 and 2 and loglevel 1 and 2
        }

        if [source] =~ /atlassian-bitbucket.log/ or [source] =~ /atlassian-bitbucket-\d\d\d\d-\d\d-\d\d\.log/ {
            grok {
                break_on_match => true
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} +%{SYSLOG5424SD:thread} (%{USER:user} )?%{NOTSPACE:requestid} (%{NOTSPACE:sessionid} )?%{IP:clientip},%{IP:proxyip} %{QUOTEDSTRING:action} %{JAVACLASS:category} %{JAVALOGMESSAGE:log_message}$" }
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} +%{SYSLOG5424SD:thread}  %{JAVACLASS:category} %{JAVALOGMESSAGE:log_message}$" }
            }
        }

        if [source] =~ /atlassian-bitbucket-access/ {
            grok {
                match => { "message" => "^%{IP:clientip}(,%{IP:proxyip})?(,%{IP:serverip})? \| %{NOTSPACE:protocol} \| %{NOTSPACE:requestid} \| %{USER:user} \| %{TIMESTAMP_ISO8601:log_timestamp} \| \"?%{DATA:action}\"? \| (%{QS:ref_url}|-) (%{QS:agent} )?\| (%{INT:response}|-) \| (%{INT:bytes_read}|-) \| (%{INT:bytes_written}|-) \| (%{DATA:labels}|-) \| (%{INT:response_time}|-) \| (%{NOTSPACE:sessionid}|-) \|" }
            }
        }

        if [source] =~ /atlassian-bitbucket-mail/ {
            grok {
                match => { "message" => "^%{TIMESTAMP_ISO8601:log_timestamp} %{LOGLEVEL:loglevel} +%{SYSLOG5424SD:thread}  %{NOTSPACE:category} %{JAVALOGMESSAGE:log_message}$" }
            }
        }

        if [source] =~ /atlassian-bitbucket-audit/ {
            grok {
                match => { "message" => "^(%{IPORHOST:clientip}(,%{IPORHOST:proxyip})?|-) \| %{NOTSPACE:event_name} \| %{USER:user} \| %{NUMBER:log_timestamp} \| %{NOTSPACE:http_user} \| %{DATA:event_details} \| %{NOTSPACE:requestid} \| (%{NOTSPACE:sessionid}|-)$" }
            }
            # TODO: convert epoch to normal timestamp!!
        }

        if [source] =~ /bitbucket_search.log/ {
            grok {
                match => { "message" => "^\[%{TIMESTAMP_ISO8601:log_timestamp}\]\[%{LOGLEVEL:loglevel}( +)?\]\[%{NOTSPACE:category}( +)?] %{JAVALOGMESSAGE:log_message}$" }
            }
            if [log_message] =~ /disk watermark(.*)exceeded on(.*)free/ {
                grok {
                    match => { "log_message" => "^\[bitbucket_bundled\] (high|low) disk watermark \[%{NUMBER:disk_used_perc}\%\] exceeded on %{SYSLOG5424SD:disk_id}\[bitbucket_bundled\]%{SYSLOG5424SD:disk_path} free: %{NOTSPACE:diskspace_free}\[%{NUMBER:diskspace_free_perc}(.*)" }
                }
            }
        }

        # set logtrail field
        mutate {
            add_field => { "logtrail" => "Atlassian - Bitbucket" }
        }
    }

    if "APACHE" in [tags] {
        # first parse the access and error logs
        if [source] =~ /access/ {
            grok {
                match => { "message" => "%{COMBINEDAPACHELOG}" }
            }
            mutate {
                rename => { "timestamp" => "log_timestamp" }
                add_field => { "loglevel" => "INFO" }
            }
        }
        if [source] =~ /error/ {
            # HTTPD24_ERRORLOG reuses field message. To preserve original content of message, store it in field raw
            mutate { add_field => { "raw" => "%{message}" } }
            grok {
                match => { "message" => "%{HTTPD24_ERRORLOG}" }
            }
            mutate {
                uppercase => ["loglevel"]
                rename => { "client" => "clientip" }
                rename => { "timestamp" => "log_timestamp" }
                rename => { "message" => "log_message" }
                # restore field message with original value
                rename => { "raw" => "message" }
            }
        }

        # filebeat.prospector for apache logs doesn't set tags for jira, confluence or bitbuckt, so set them here
        if [source] =~ /jira-access.log/ {
            mutate {
                add_tag => [ "JIRA" ]
                add_field => { "logtrail" => "Atlassian - Jira" }
            }
        }
        if [source] =~ /confluence-access.log/ {
            mutate {
                add_tag => [ "CONFLUENCE" ]
                add_field => { "logtrail" => "Atlassian - Confluence" }
            }
        }
        if [source] =~ /bitbucket-access.log/ {
            mutate {
                add_tag => [ "BITBUCKET" ]
                add_field => { "logtrail" => "Atlassian - Bitbucket" }
            }
        }
        if ![logtrail] {
            mutate {
                add_field => { "logtrail" => "Atlassian - Apache" }
            }
        }

    }


    if "ATLASSIAN" in [tags] {
        # parse action into verb, request and http version
        if [action] {
            grok {
                match => { "action" => "^(%{NOTSPACE:verb} %{NOTSPACE:request} HTTP/%{NOTSPACE:http_version})?" }
            }
        }
        # set event timestamp to log_timestamp (as provided by the logfile)
        date {
            match => [ "log_timestamp",
                       "ISO8601",                               # catalina.out, catalina.*.log, security.log, confluence.log
                       "dd-MMM-YYYY HH:mm:ss.SSS",              # catalina.out (diff format)
                       "dd-MMM-YYYY HH:mm:ss,SSS",              # catalina.out (diff format)
                       "YYYY-MM-dd HH:mm:ss",                   # catalina out (diff format)
                       "dd/MMM/YYYY:HH:mm:ss Z",                # access_log timestamp format
                       "UNIX_MS",                               # epoch timestamp (used in audit log)
                       "EEE MMM dd HH:mm:ss.SSSSSS YYYY" ]      # apache error logs
             timezone => "Europe/Amsterdam"
             locale => "en"
#            remove_field => [ "log_timestamp" ]
        }
    }
}
