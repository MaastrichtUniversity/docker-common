filter {
    if "IRES" in [tags] {
        if [message] =~ /environment variable set/ {drop { }}
        if [message] =~ /Authenticated/ {drop { }}

        ## First let's do the service specific parts
        if "IRES_UM01" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um01" }
            }
        }
        if "IRES_UM02" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um02" }
            }
        }
        if "IRES_UM03" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um03" }
            }
        }
        if "IRES_AZM" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_azm" }
            }
        }
        if "IRES_SURFSARA" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_surfsara" }
            }
        }


        ## Now do the general parsing which is equal for all resource servers

        grok {
            break_on_match => true
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:log_message}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:timestamp}\spid:%{POSINT:pid}\s%{DATA:level}:\s+%{GREEDYDATA:log_message}" }
        }

        # Get client IPs
        if [log_message] =~ /started/ {
            grok {
                    match => { "log_message" => "Agent\sprocess\s%{POSINT:pid}\sstarted\sfor\spuser=%{HTTPDUSER:puser}\sand\scuser=%{HTTPDUSER:cuser}\sfrom\s%{IPV4:clientip}" }
                }
        }
##EXCLUDE#        if [log_message =~/msiWriteRodsLog message/ {
##EXCLUDE#            # strip prefix from log_message
##EXCLUDE#            grok {
##EXCLUDE#                match => { "log_message" => "msiWriteRodsLog message: %{GREEDYDATA:log_message}" }

        # GeoIP
        if [clientip] {
            geoip {
                source => "clientip"
                target => "geoip"
                database => "/etc/logstash/GeoLite2-City.mmdb"
                add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                add_tag => ["geoip"]
#                remove_field => [ "[geoip][longitude]", "[geoip][latitude]" ] # Should these be removed (cleaner) or not (atomic info)
            }

            mutate {
                convert => [ "[geoip][coordinates]", "float" ]
            }
        }


        if [timestamp]{
            # Year is not present in the log date format, getting it from the filename
            grok {
                match => { "source" => "%{YEAR:log_year}" }
            }

            mutate {
                replace => [ "timestamp", "%{timestamp} %{log_year}" ]
                remove_field => "log_year"
            }

            date {
                timezone => "Europe/Amsterdam"
                match => [ "timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
                remove_field => [ "timestamp" ] #cleanup, data is available in @timestamp
            }
        }
    }
}
