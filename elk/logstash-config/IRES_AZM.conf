filter {
      if "IRES_AZM" in [tags] {
		  if [message] =~ /environment variable set/ {drop { }}
		  if [message] =~ /Authenticated/ {drop { }}
		
		   grok {
                     break_on_match => true
                     match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:rods_msg}" }
                     match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{DATA:level}:\s+%{GREEDYDATA:rods_msg}" }
            }
		
          mutate {
            add_field => { "logtrail" => "ires_azm" }
          } 
   
		  # Get client IPs
		  if [rods_msg] =~ /started/ {
					grok {
						  match => { "rods_msg" => "Agent\sprocess\s%{POSINT:agent_pid}\sstarted\sfor\spuser=%{HTTPDUSER:puser}\sand\scuser=%{HTTPDUSER:cuser}\sfrom\s%{IPV4:irods_client_addr}" }
					}
			}
		
		
		  # GeoIP
		  if [irods_client_addr] {
				  geoip {
					source => "irods_client_addr"
					target => "geoip"
					database => "/etc/logstash/GeoLite2-City.mmdb"
					add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
					add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
					add_tag => ["geoip"]
				  }
		
				  mutate {
					convert => [ "[geoip][coordinates]", "float" ]
				  }
		   }
		   
		   
		   
		   
			
			 # Year is not present in the log date format, getting it from the filename
            grok {
                  match => { "source" => "%{YEAR:log_year}" }
            }


            if [log_timestamp]{
                mutate {
                   replace => [ "log_timestamp", "%{log_timestamp} %{log_year}" ]
                   remove_field => "log_year"
                }
                date {
                  timezone => "Europe/Brussels"
                  match => [ "log_timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
                }
           }
     }
}
