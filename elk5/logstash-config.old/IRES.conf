filter {
    if "IRES" in [tags] {
        if [message] =~ /environment variable set/ {drop { }}
        if [message] =~ /Authenticated/ {drop { }}

        ## First let's do the service specific parts
        if "IRES_UM01" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um01" }
            }
        }
        if "IRES_UM02" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um02" }
            }
        }
        if "IRES_UM03" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_um03" }
            }
        }
        if "IRES_AZM" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_azm" }
            }
        }
        if "IRES_SURFSARA" in [tags] {
            mutate {
                add_field => { "logtrail" => "ires_surfsara" }
            }
        }


        ## Now do the general parsing which is equal for all resource servers

        grok {
            break_on_match => true
            match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:rods_msg}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{DATA:level}:\s+%{GREEDYDATA:rods_msg}" }
        }

        # Get client IPs
        if [rods_msg] =~ /started/ {
            grok {
                    match => { "rods_msg" => "Agent\sprocess\s%{POSINT:agent_pid}\sstarted\sfor\spuser=%{HTTPDUSER:puser}\sand\scuser=%{HTTPDUSER:cuser}\sfrom\s%{IPV4:irods_client_addr}" }
                }
        }
        if [rods_msg =~/msiWriteRodsLog message/ {
            # strip prefix from rods_msg
            grok {
                match => { "rods_msg" => "msiWriteRodsLog message: %{GREEDYDATA:rods_msg}" }

        # GeoIP
        if [irods_client_addr] {
            geoip {
                source => "irods_client_addr"
                target => "geoip"
                database => "/etc/logstash/GeoLite2-City.mmdb"
                add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                add_tag => ["geoip"]
            }

            mutate {
                convert => [ "[geoip][coordinates]", "float" ]
            }
        }

        # Year is not present in the log date format, getting it from the filename
        grok {
            match => { "source" => "%{YEAR:log_year}" }
        }

        if [log_timestamp]{
            mutate {
                replace => [ "log_timestamp", "%{log_timestamp} %{log_year}" ]
                remove_field => "log_year"
            }
            date {
                timezone => "Europe/Brussels"
                match => [ "log_timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
            }
        }
    }
}
