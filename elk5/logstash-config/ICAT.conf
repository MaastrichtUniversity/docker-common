filter {
     if "ICAT" in [tags] {
      if [message] =~ /environment variable set/ {drop { }}
      if [message] =~ /Authenticated/ {drop { }}
    
      grok {
            break_on_match => true
            match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{LOGLEVEL:level}:\s+%{GREEDYDATA:rods_msg}" }
            match => { "message" => "%{SYSLOGTIMESTAMP:log_timestamp}\spid:%{POSINT:pid}\s%{DATA:level}:\s+%{GREEDYDATA:rods_msg}" }
            match => { "message" => "^remote addresses: %{IP:serverip} %{LOGLEVEL:level}: %{DATA:errormsg} %{NUMBER:irods-errorcode} for id %{NUMBER:pid}\nremote addresses: %{IP} %{LOGLEVEL:level2}: Rule exec for \[\n%{SPACE}%{JAVALOGMESSAGE:irods-rule}\n%{SPACE}" }
            match => { "message" => "^remote addresses: %{IP:serverip} %{LOGLEVEL:level}: %{GREEDYDATA:errmsg}%{SPACE}%{JAVALOGMESSAGE:irods-rule}%{SPACE}%{GREEDYDATA}%{SPACE}%{GREEDYDATA}%{SPACE}%{JAVALOGMESSAGE}%{SPACE}}%{SPACE}failed\." }
      }
     
      mutate {
        add_field => { "logtrail" => "irods" }
      }
      
      # Get client IPs
      if [rods_msg] =~ /started/ {
                grok {
                      match => { "rods_msg" => "Agent\sprocess\s%{POSINT:agent_pid}\sstarted\sfor\spuser=%{HTTPDUSER:puser}\sand\scuser=%{HTTPDUSER:cuser}\sfrom\s%{IPV4:clientip}" }
                }
        }
    
       # Year is not present in the log date format, getting it from the filename
        grok {
              match => { "source" => "%{YEAR:log_year}" }
        }
        
        
        if [log_timestamp]{
            mutate {
               replace => [ "log_timestamp", "%{log_timestamp} %{log_year}" ]
               remove_field => "log_year"
            }
            date { 
              timezone => "Europe/Brussels"
              match => [ "log_timestamp", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ] 
            }
       }
     }
}
